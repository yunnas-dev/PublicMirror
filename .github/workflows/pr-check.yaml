name: PR Checks

on:
 pull_request:
   types: [opened, synchronize, reopened]
   paths:
     - 'charts/**'

jobs:
 validate-charts:
   runs-on: ubuntu-latest
   permissions:
     contents: read
     checks: write
     pull-requests: write
   
   steps:
     - uses: actions/checkout@v3
       with:
         fetch-depth: 0
         ref: ${{ github.event.pull_request.head.sha }}
         
     - name: Set up Helm
       uses: azure/setup-helm@v3
       with:
         version: v3.12.3

     - name: Install dependencies
       run: |
         sudo apt-get update
         sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
         sudo chmod +x /usr/local/bin/yq
         sudo apt-get install -y jq git
         sudo apt-get install -y gh

     - name: Get modified directories
       id: changes
       env:
         GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
       run: |
         # 仅获取PR中变更的文件
         CHANGED_FILES=$(gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files[].path' | grep '^charts/stable/' || true)
         
         if [ -z "$CHANGED_FILES" ]; then
           echo "No charts modified in this PR"
           exit 0
         fi
         
         echo "Files changed in PR:"
         echo "$CHANGED_FILES"
         
         # 提取变更的chart目录 
         CHANGED_DIRS=$(echo "$CHANGED_FILES" | awk -F/ '/^charts\/stable\/[^\/]+/{printf "%s/%s/%s\n", $1,$2,$3}' | sort -u)
         
         echo "Charts to validate:"
         echo "$CHANGED_DIRS"
         
         echo "changed_dirs<<EOF" >> $GITHUB_OUTPUT
         echo "$CHANGED_DIRS" >> $GITHUB_OUTPUT
         echo "EOF" >> $GITHUB_OUTPUT

     - name: Validate Charts Structure
       id: validate
       continue-on-error: true
       run: |
         ERROR_MSG=""
         
         while IFS= read -r chart; do
           if [ -z "$chart" ]; then
             continue
           fi
           
           echo "检查 Chart: $chart"
           
           # 检查必需文件
           for file in Chart.yaml values.yaml values.schema.json README.md; do
             if [ ! -f "$chart/$file" ]; then
               ERROR_MSG="${ERROR_MSG}- 缺少必需文件: $file, 位于 $chart\n"
             fi
           done
           
           # 检查 Chart.yaml 必需字段
           if [ -f "$chart/Chart.yaml" ]; then
             for field in apiVersion name description version appVersion annotations; do
               if ! yq e ".$field" "$chart/Chart.yaml" > /dev/null 2>&1; then
                 ERROR_MSG="${ERROR_MSG}- Chart.yaml 中缺少必需字段: $field, 位于 $chart\n"
               fi
             done
           fi

           # 检查values.yaml必需配置
           if [ -f "$chart/values.yaml" ]; then
             # 检查镜像仓库配置
             if ! yq e '.image.imageRegistry' "$chart/values.yaml" | grep -q "registry-2.yunna.net"; then
               ERROR_MSG="${ERROR_MSG}- 镜像仓库地址必须为 registry-2.yunna.net, 位于 $chart\n"
             fi

             # 检查持久化配置
             if ! yq e '.persistence' "$chart/values.yaml" > /dev/null 2>&1; then
               ERROR_MSG="${ERROR_MSG}- 缺少持久化配置, 位于 $chart\n"
             fi

             # 检查资源限制配置
             if ! yq e '.resources' "$chart/values.yaml" > /dev/null 2>&1; then
               ERROR_MSG="${ERROR_MSG}- 缺少资源限制配置, 位于 $chart\n"
             fi
           fi
           
           # 检查必需的模板文件
           for tmpl in deployment.yaml service.yaml _helpers.tpl; do
             if [ ! -f "$chart/templates/$tmpl" ]; then
               ERROR_MSG="${ERROR_MSG}- 缺少必需的模板文件: $tmpl, 位于 $chart\n"
             fi
           done

           # 检查_helpers.tpl
           if [ -f "$chart/templates/_helpers.tpl" ]; then
             if ! grep -q "{{- define \"${chart##*/}.name\"" "$chart/templates/_helpers.tpl"; then
               ERROR_MSG="${ERROR_MSG}- _helpers.tpl 中缺少 ${chart##*/}.name 定义, 位于 $chart\n"
             fi
             if ! grep -q "{{- define \"${chart##*/}.labels\"" "$chart/templates/_helpers.tpl"; then
               ERROR_MSG="${ERROR_MSG}- _helpers.tpl 中缺少 ${chart##*/}.labels 定义, 位于 $chart\n" 
             fi
           fi

           # Helm lint 检查
           if ! helm lint "$chart"; then
             ERROR_MSG="${ERROR_MSG}- Helm lint 检查失败, 位于 $chart\n"
           fi
         done <<< "${{ steps.changes.outputs.changed_dirs }}"
         
         if [ ! -z "$ERROR_MSG" ]; then
           echo "error_msg<<EOF" >> $GITHUB_OUTPUT
           echo -e "$ERROR_MSG" >> $GITHUB_OUTPUT
           echo "EOF" >> $GITHUB_OUTPUT
           exit 1
         fi

     - name: Check Version Bump
       id: version
       if: success()
       run: |
         ERROR_MSG=""
         
         while IFS= read -r chart; do
           if [ -z "$chart" ]; then
             continue
           fi
           
           if [ ! -f "$chart/Chart.yaml" ]; then
             echo "Chart.yaml not found for $chart, skipping version check"
             continue  
           fi
           
           # 检查是否存在旧版本
           if ! git show origin/${{ github.base_ref }}:"$chart/Chart.yaml" | yq e '.version' - > /dev/null 2>&1; then
             echo "No previous version found for $chart, skipping version check"
             continue
           fi
           
           OLD_VERSION=$(git show origin/${{ github.base_ref }}:"$chart/Chart.yaml" | yq e '.version' -)
           NEW_VERSION=$(yq e '.version' "$chart/Chart.yaml")
           
           echo "Checking version for $chart: $OLD_VERSION -> $NEW_VERSION"
           
           if [ "$OLD_VERSION" = "$NEW_VERSION" ]; then
             ERROR_MSG="${ERROR_MSG}- Chart 版本未更新: $chart ($OLD_VERSION)\n"
           fi
         done <<< "${{ steps.changes.outputs.changed_dirs }}"
         
         if [ ! -z "$ERROR_MSG" ]; then
           echo "error_msg<<EOF" >> $GITHUB_OUTPUT
           echo -e "$ERROR_MSG" >> $GITHUB_OUTPUT 
           echo "EOF" >> $GITHUB_OUTPUT
           exit 1
         fi

     - name: Create PR Comment
       if: failure()
       uses: actions/github-script@v7
       with:
         github-token: ${{ secrets.GITHUB_TOKEN }}
         script: |
           try {
             let errors = [];
             const validateErrors = '${{ steps.validate.outputs.error_msg }}';
             const versionErrors = '${{ steps.version.outputs.error_msg }}';
             
             if (validateErrors) {
               errors.push(...validateErrors.split('\n'));
             }
             if (versionErrors) {
               errors.push(...versionErrors.split('\n')); 
             }
             
             const body = `## ❌ Chart 验证失败\n\n${errors.filter(Boolean).join('\n')}\n\n### 修复建议\n1. 请检查上述失败项\n2. 参考 [Chart开发规范](../docs/charts/STANDARDS.md)\n3. 使用 \`helm lint\` 验证语法\n4. 确保所有必需文件和字段完整\n\n修复后重新提交即可触发检查。`;
             
             await github.rest.issues.createComment({
               ...context.repo,
               issue_number: context.issue.number,
               body
             });

             await github.rest.issues.addLabels({
               ...context.repo,
               issue_number: context.issue.number,
               labels: ['needs-fix']
             });
           } catch (error) {
             console.error('Error creating comment:', error);
             throw error;
           }