name: PR Checks

on:
 pull_request:
   types: [opened, synchronize, reopened]
   paths:
     - 'charts/**'

jobs:
 validate-charts:
   runs-on: ubuntu-latest
   permissions:
     contents: read
     pull-requests: write
     
   steps:
     - uses: actions/checkout@v3
       with:
         fetch-depth: 0
         ref: ${{ github.event.pull_request.head.sha }}
         
     - name: Set up Helm
       uses: azure/setup-helm@v3
       with:
         version: v3.12.3

     - name: Install dependencies
       run: |
         sudo apt-get update
         sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
         sudo chmod +x /usr/local/bin/yq
         sudo apt-get install -y jq git

     - name: Get changed files
       id: files
       run: |
         git fetch origin ${{ github.base_ref }}
         CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | grep "^charts/stable/")
         {
           echo 'files<<EOF'
           echo "$CHANGED_FILES"
           echo 'EOF'
         } >> $GITHUB_OUTPUT

     - name: Get changed charts
       id: charts
       if: steps.files.outputs.files != ''
       run: |
         CHANGED_DIRS=$(echo "${{ steps.files.outputs.files }}" | grep -o "charts/stable/[^/]*" | sort -u)
         {
           echo 'changed<<EOF' 
           echo "$CHANGED_DIRS"
           echo 'EOF'
         } >> $GITHUB_OUTPUT

     - name: Validate charts
       if: steps.charts.outputs.changed != ''
       id: validate
       run: |
         set -e
         FAILED=0
         ERROR_MSG=""
         
         while IFS= read -r chart; do
           [[ -z "$chart" ]] && continue
           
           echo "Validating chart: $chart"
           
           if [[ ! -d "$chart" ]]; then
             ERROR_MSG+="- Directory not found: $chart\n"
             FAILED=1
             continue
           fi

           # Check required files
           for file in Chart.yaml values.yaml values.schema.json README.md; do
             if [[ ! -f "$chart/$file" ]]; then
               ERROR_MSG+="- Missing required file: $file in $chart\n"
               FAILED=1
             fi
           done

           # Check Chart.yaml fields
           if [[ -f "$chart/Chart.yaml" ]]; then
             for field in apiVersion name description version appVersion annotations; do
               if ! yq e ".$field" "$chart/Chart.yaml" >/dev/null 2>&1; then
                 ERROR_MSG+="- Missing required field in Chart.yaml: $field in $chart\n"
                 FAILED=1
               fi
             done
           fi

           # Check image registry
           if [[ -f "$chart/values.yaml" ]]; then
             if ! yq e '.image.imageRegistry' "$chart/values.yaml" | grep -q "registry-2.yunna.net"; then
               ERROR_MSG+="- Image registry must be registry-2.yunna.net in $chart\n"
               FAILED=1 
             fi
           fi

           # Check template files
           for tmpl in deployment.yaml service.yaml _helpers.tpl; do
             if [[ ! -f "$chart/templates/$tmpl" ]]; then
               ERROR_MSG+="- Missing template file: $tmpl in $chart\n" 
               FAILED=1
             fi
           done

           # Run helm lint
           if ! helm lint "$chart" >/dev/null 2>&1; then
             ERROR_MSG+="- Helm lint failed for $chart\n"
             FAILED=1
           fi

           # Check version bump
           if [[ -f "$chart/Chart.yaml" ]] && git show origin/${{ github.base_ref }}:"$chart/Chart.yaml" >/dev/null 2>&1; then
             OLD_VERSION=$(git show origin/${{ github.base_ref }}:"$chart/Chart.yaml" | yq e '.version' -)
             NEW_VERSION=$(yq e '.version' "$chart/Chart.yaml")
             if [[ "$OLD_VERSION" == "$NEW_VERSION" ]]; then
               ERROR_MSG+="- Chart version not updated: $chart ($OLD_VERSION)\n"
               FAILED=1
             fi
           fi
           
         done <<< "${{ steps.charts.outputs.changed }}"

         {
           echo 'error_msg<<EOF'
           echo -e "$ERROR_MSG"
           echo 'EOF'
         } >> $GITHUB_OUTPUT
         
         exit $FAILED

     - name: Post PR comment
       if: failure()
       uses: actions/github-script@v7
       with:
         script: |
           const errors = process.env.error_msg?.split('\n').filter(Boolean) || [];
           if (errors.length === 0) return;

           const body = `## ❌ Chart 验证失败

           ### 错误详情：
           ${errors.map(e => e.trim()).join('\n')}

           ### 修复建议：
           1. 检查上述错误项
           2. 参考 [Chart开发规范](../docs/charts/STANDARDS.md)
           3. 确保必需文件和字段完整
           4. 使用 \`helm lint\` 验证语法

           修复后重新提交即可触发检查。`;

           await github.rest.issues.createComment({
             ...context.repo,
             issue_number: context.issue.number,
             body
           });

           await github.rest.issues.addLabels({
             ...context.repo, 
             issue_number: context.issue.number,
             labels: ['needs-fix']
           });
       env:
         error_msg: ${{ steps.validate.outputs.error_msg }}