name: PR Checks

on:
 pull_request:
   types: [opened, synchronize, reopened]
   paths:
     - 'charts/**'

jobs:
 validate-charts:
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v3
       with:
         fetch-depth: 0
         ref: ${{ github.event.pull_request.head.sha }}
     
     - name: Set up Helm
       uses: azure/setup-helm@v3
       with:
         version: v3.12.3

     - name: Install dependencies
       run: |
         sudo apt-get update
         sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
         sudo chmod +x /usr/local/bin/yq
         sudo apt-get install -y jq git

     - name: Get changed files
       id: files
       run: |
         git fetch origin ${{ github.base_ref }}
         CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | grep "^charts/stable/")
         {
           echo 'files<<EOF'
           echo "$CHANGED_FILES"
           echo 'EOF'
         } >> $GITHUB_OUTPUT

     - name: Validate charts
       if: steps.files.outputs.files != ''
       run: |
         set -e
         FAILED=0
         
         for chart in $(echo "${{ steps.files.outputs.files }}" | grep -o "charts/stable/[^/]*" | sort -u); do
           echo "::group::Validating $chart"
           
           # Critical checks
           if [[ ! -d "$chart" ]]; then
             echo "::error::Directory not found: $chart"
             FAILED=1
             continue
           fi
           
           # File checks
           for file in Chart.yaml values.yaml values.schema.json README.md; do
             if [[ ! -f "$chart/$file" ]]; then
               echo "::error::Missing file $file in $chart"
               FAILED=1
             fi
           done
           
           # Chart.yaml fields check
           if [[ -f "$chart/Chart.yaml" ]]; then
             for field in apiVersion name description version appVersion annotations; do
               if ! yq e ".$field" "$chart/Chart.yaml" >/dev/null 2>&1; then
                 echo "::error::Missing required field $field in $chart/Chart.yaml"
                 FAILED=1
               fi
             done
           fi
           
           # Registry check
           if [[ -f "$chart/values.yaml" ]]; then
             if ! yq e '.image.imageRegistry' "$chart/values.yaml" | grep -q "registry-2.yunna.net"; then
               echo "::error::Image registry must be registry-2.yunna.net in $chart"
               FAILED=1
             fi
           fi
           
           # Template files check
           for tmpl in deployment.yaml service.yaml _helpers.tpl; do
             if [[ ! -f "$chart/templates/$tmpl" ]]; then
               echo "::error::Missing template file $tmpl in $chart"
               FAILED=1
             fi
           done
           
           # Helm lint check
           if ! helm lint "$chart" >/dev/null 2>&1; then
             echo "::error::Helm lint failed for $chart"
             FAILED=1
           fi
           
           # Version check
           if [[ -f "$chart/Chart.yaml" ]]; then
             OLD_VERSION=""
             if git show origin/${{ github.base_ref }}:"$chart/Chart.yaml" >/dev/null 2>&1; then
               OLD_VERSION=$(git show origin/${{ github.base_ref }}:"$chart/Chart.yaml" | yq e '.version' -)
               NEW_VERSION=$(yq e '.version' "$chart/Chart.yaml")
               if [[ "$OLD_VERSION" == "$NEW_VERSION" ]]; then
                 echo "::error::Chart version not updated in $chart (current: $NEW_VERSION)"
                 FAILED=1
               fi
             fi
           fi
           
           echo "::endgroup::"
         done
         
         exit $FAILED

     - name: Create status check
       if: always()
       shell: bash
       run: |
         cat >> $GITHUB_STEP_SUMMARY << EOF
         ## Chart Validation Results
         
         ### Validation Criteria
         - Required files present (Chart.yaml, values.yaml, values.schema.json, README.md)
         - Chart.yaml fields complete
         - Image registry set to registry-2.yunna.net
         - Template files present
         - Version updated
         - Helm lint passes
         
         ### Next Steps
         - Fix any errors shown above
         - Refer to [Chart开发规范](../docs/charts/STANDARDS.md)
         - Run helm lint locally to check syntax
         - Ensure all required files and fields are complete
         
         Changes will be validated automatically when you update the PR.
         EOF