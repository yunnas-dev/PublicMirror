name: PR Checks

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
    paths:
      - 'charts/**'

jobs:
  validate-charts:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write
      issues: write  # 允许添加评论和标签

    steps:
      # 1. Checkout target repository code (main branch)
      - name: Checkout target repository code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.base.sha }}
          fetch-depth: 0  # 获取完整的历史记录

      # 2. Checkout PR head repository code (fork)
      - name: Checkout PR head code
        uses: actions/checkout@v3
        with:
          repository: ${{ github.event.pull_request.head.repo.full_name }}
          ref: ${{ github.event.pull_request.head.sha }}
          path: pr-code
          token: ${{ secrets.GITHUB_TOKEN }}

      # 3. Set up Helm
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.3

      # 4. Install dependencies
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq
          sudo apt-get install -y jq git
          sudo apt-get install -y gh

      # 5. Get modified directories from PR
      - name: Get modified directories
        id: changes
        run: |
          # 使用 GitHub CLI 获取 PR 变更的文件
          CHANGED_FILES=$(gh pr view ${{ github.event.pull_request.number }} --json files --jq '.files[].path' | grep '^charts/stable/' || true)

          if [ -z "$CHANGED_FILES" ]; then
            echo "No charts modified in this PR"
            exit 0
          fi

          echo "Files changed in PR:"
          echo "$CHANGED_FILES"

          # 提取变更的 chart 目录
          CHANGED_DIRS=$(echo "$CHANGED_FILES" | awk -F/ '/^charts\/stable\/[^\/]+/{printf "%s/%s/%s\n", $1,$2,$3}' | sort -u)

          echo "Charts to validate:"
          echo "$CHANGED_DIRS"

          # 将变更目录设置为输出
          echo "changed_dirs<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_DIRS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      # 6. Validate Charts Structure
      - name: Validate Charts Structure
        id: validate
        continue-on-error: true
        run: |
          ERROR_MSG=""

          while IFS= read -r chart; do
            if [ -z "$chart" ]; then
              continue
            fi

            PR_CHART_PATH="pr-code/${chart}"
            echo "检查 Chart: $chart"

            # 检查必需文件
            for file in Chart.yaml values.yaml values.schema.json README.md; do
              if [ ! -f "$PR_CHART_PATH/$file" ]; then
                ERROR_MSG="${ERROR_MSG}- 缺少必需文件: $file, 位于 $chart\n"
              fi
            done

            # 检查 Chart.yaml 必需字段
            if [ -f "$PR_CHART_PATH/Chart.yaml" ]; then
              for field in apiVersion name description version appVersion annotations; do
                if ! yq e ".$field" "$PR_CHART_PATH/Chart.yaml" > /dev/null 2>&1; then
                  ERROR_MSG="${ERROR_MSG}- Chart.yaml 中缺少必需字段: $field, 位于 $chart\n"
                fi
              done
            fi

            # 检查 values.yaml 必需配置
            if [ -f "$PR_CHART_PATH/values.yaml" ]; then
              # 检查镜像仓库配置
              if ! yq e '.image.imageRegistry' "$PR_CHART_PATH/values.yaml" | grep -q "registry-2.yunna.net"; then
                ERROR_MSG="${ERROR_MSG}- 镜像仓库地址必须为 registry-2.yunna.net, 位于 $chart\n"
              fi

              # 检查持久化配置
              if ! yq e '.persistence' "$PR_CHART_PATH/values.yaml" > /dev/null 2>&1; then
                ERROR_MSG="${ERROR_MSG}- 缺少持久化配置, 位于 $chart\n"
              fi

              # 检查资源限制配置
              if ! yq e '.resources' "$PR_CHART_PATH/values.yaml" > /dev/null 2>&1; then
                ERROR_MSG="${ERROR_MSG}- 缺少资源限制配置, 位于 $chart\n"
              fi
            fi

            # 检查必需的模板文件
            for tmpl in deployment.yaml service.yaml _helpers.tpl; do
              if [ ! -f "$PR_CHART_PATH/templates/$tmpl" ]; then
                ERROR_MSG="${ERROR_MSG}- 缺少必需的模板文件: $tmpl, 位于 $chart\n"
              fi
            done

            # 检查 _helpers.tpl
            if [ -f "$PR_CHART_PATH/templates/_helpers.tpl" ]; then
              if ! grep -q "{{- define \"$CHART_NAME.name\"" "$PR_CHART_PATH/templates/_helpers.tpl"; then
                ERROR_MSG="${ERROR_MSG}- _helpers.tpl 中缺少 $CHART_NAME.name 定义\n"
              fi
              if ! grep -q "{{- define \"$CHART_NAME.labels\"" "$PR_CHART_PATH/templates/_helpers.tpl"; then 
                ERROR_MSG="${ERROR_MSG}- _helpers.tpl 中缺少 $CHART_NAME.labels 定义\n"
              fi
            fi

            # Helm lint 检查
            if ! helm lint "$PR_CHART_PATH"; then
              ERROR_MSG="${ERROR_MSG}- Helm lint 检查失败, 位于 $chart\n"
            fi
          done <<< "${{ steps.changes.outputs.changed_dirs }}"

          if [ ! -z "$ERROR_MSG" ]; then
            echo "error_msg<<EOF" >> $GITHUB_OUTPUT
            echo -e "$ERROR_MSG" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          fi

      # 7. Check Version Bump
      - name: Check Version Bump
        id: version
        if: success()
        run: |
          ERROR_MSG=""

          while IFS= read -r chart; do
            if [ -z "$chart" ]; then
              continue
            fi

            PR_CHART_PATH="pr-code/${chart}"

            if [ ! -f "$PR_CHART_PATH/Chart.yaml" ]; then
              echo "Chart.yaml not found for $chart, skipping version check"
              continue  
            fi

            # 检查是否存在旧版本
            if ! git show origin/main:"${chart}/Chart.yaml" | yq e '.version' - > /dev/null 2>&1; then
              echo "No previous version found for $chart, skipping version check"
              continue
            fi

            OLD_VERSION=$(git show origin/main:"${chart}/Chart.yaml" | yq e '.version' -)
            NEW_VERSION=$(yq e '.version' "$PR_CHART_PATH/Chart.yaml")

            echo "Checking version for $chart: $OLD_VERSION -> $NEW_VERSION"

            if [ "$OLD_VERSION" = "$NEW_VERSION" ]; then
              ERROR_MSG="${ERROR_MSG}- Chart 版本未更新: $chart ($OLD_VERSION)\n"
            fi
          done <<< "${{ steps.changes.outputs.changed_dirs }}"

          if [ ! -z "$ERROR_MSG" ]; then
            echo "error_msg<<EOF" >> $GITHUB_OUTPUT
            echo -e "$ERROR_MSG" >> $GITHUB_OUTPUT 
            echo "EOF" >> $GITHUB_OUTPUT
            exit 1
          fi

      # 8. Create PR Comment and Add Label using peter-evans/create-or-update-comment
      - name: Create PR Comment and Add Label
        if: failure()
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## ❌ Chart 验证失败

            - ${{ steps.validate.outputs.error_msg }}
            - ${{ steps.version.outputs.error_msg }}

            ### 修复建议
            1. 请检查上述失败项
            2. 参考 [Chart开发规范](../docs/charts/STANDARDS.md)
            3. 使用 `helm lint` 验证语法
            4. 确保所有必需文件和字段完整

            修复后重新提交即可触发检查。

      # 9. Add Label 'needs-fix' using actions-ecosystem/action-add-labels
      - name: Add Label 'needs-fix'
        if: failure()
        uses: actions-ecosystem/action-add-labels@v1
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          labels: 'needs-fix'
