name: PR Checks

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - 'charts/**'

jobs:
  validate-charts:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Set up Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Validate Charts Structure
        run: |
          EXIT_CODE=0
          
          for chart in $(find ./charts/stable -name Chart.yaml -exec dirname {} \;); do
            echo "检查 Chart: $chart"
            
            # 检查必需文件
            for file in Chart.yaml values.yaml values.schema.json README.md; do
              if [ ! -f "$chart/$file" ]; then
                echo "::error::缺少必需文件：$file，位于 $chart"
                EXIT_CODE=1
              fi
            done
            
            # 检查 Chart.yaml 必需字段
            for field in apiVersion name description version appVersion annotations; do
              if ! yq e ".$field" "$chart/Chart.yaml" > /dev/null 2>&1; then
                echo "::error::Chart.yaml 中缺少必需字段：$field"
                EXIT_CODE=1
              fi
            done
            
            # Helm lint 检查
            if ! helm lint "$chart"; then
              echo "::error::Helm lint 检查失败：$chart"
              EXIT_CODE=1
            fi
            
            # 检查模板渲染
            if ! helm template test "$chart"; then
              echo "::error::Helm template 渲染失败：$chart"
              EXIT_CODE=1
            fi

            # values.schema.json 格式检查
            if ! jq empty "$chart/values.schema.json"; then
              echo "::error::values.schema.json 格式无效：$chart"
              EXIT_CODE=1
            fi
          done
          
          exit $EXIT_CODE

      - name: Check Chart Version Bump
        if: github.event_name == 'pull_request'
        run: |
          EXIT_CODE=0
          git fetch origin ${{ github.base_ref }}
          
          for chart in $(find ./charts/stable -name Chart.yaml -exec dirname {} \;); do
            if git diff --quiet origin/${{ github.base_ref }} -- "$chart/Chart.yaml"; then
              continue
            fi
            
            OLD_VERSION=$(git show origin/${{ github.base_ref }}:"$chart/Chart.yaml" | yq e '.version' -)
            NEW_VERSION=$(yq e '.version' "$chart/Chart.yaml")
            
            if [ "$OLD_VERSION" = "$NEW_VERSION" ]; then
              echo "::error::Chart版本未更新：$chart ($OLD_VERSION)"
              EXIT_CODE=1
            fi
          done
          
          exit $EXIT_CODE