name: PR Checks

on:
pull_request:
  types: [opened, synchronize, reopened]
  paths:
    - 'charts/**'

jobs:
validate-charts:
  runs-on: ubuntu-latest
  steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.sha }}
    
    - name: Set up Helm
      uses: azure/setup-helm@v3
      with:
        version: v3.12.3

    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
        sudo chmod +x /usr/local/bin/yq
        sudo apt-get install -y jq git

    - name: Get changed files
      id: files
      run: |
        git fetch origin ${{ github.base_ref }}
        CHANGED_FILES=$(git diff --name-only origin/${{ github.base_ref }}..HEAD | grep "^charts/stable/[^/]*/")
        CHANGED_CHARTS=$(echo "$CHANGED_FILES" | cut -d'/' -f1-3 | sort -u)
        {
          echo 'charts<<EOF'
          echo "$CHANGED_CHARTS"
          echo 'EOF'
        } >> $GITHUB_OUTPUT

    - name: Validate charts
      if: steps.files.outputs.charts != ''
      id: validate
      run: |
        set -e
        FAILED=0
        ERROR_MSG=""
        
        echo "::group::Chart Validation Results"
        
        while IFS= read -r chart; do
          echo "Checking $chart..."
          
          if [[ ! -d "$chart" ]]; then
            echo "::error file=$chart::Directory not found"
            echo "- Directory not found: $chart" >> error_log.txt
            FAILED=1
            continue
          fi
          
          for file in Chart.yaml values.yaml values.schema.json README.md; do
            if [[ ! -f "$chart/$file" ]]; then
              echo "::error file=$chart/$file::Missing required file"
              echo "- Missing required file: $file in $chart" >> error_log.txt
              FAILED=1
            fi
          done
          
          if [[ -f "$chart/Chart.yaml" ]]; then
            for field in apiVersion name description version appVersion annotations; do
              if ! yq e ".$field" "$chart/Chart.yaml" >/dev/null 2>&1; then
                echo "::error file=$chart/Chart.yaml::Missing field: $field"
                echo "- Missing field $field in Chart.yaml: $chart" >> error_log.txt
                FAILED=1
              fi
            done
          fi
          
          if [[ -f "$chart/values.yaml" ]]; then
            registry=$(yq e '.image.imageRegistry' "$chart/values.yaml" || echo "")
            if [[ "$registry" != "registry-2.yunna.net" ]]; then
              echo "::error file=$chart/values.yaml::Image registry must be registry-2.yunna.net, found: $registry"
              echo "- Image registry must be registry-2.yunna.net in $chart" >> error_log.txt
              FAILED=1
            fi
          fi
          
          for tmpl in deployment.yaml service.yaml _helpers.tpl; do
            if [[ ! -f "$chart/templates/$tmpl" ]]; then
              echo "::error file=$chart/templates/$tmpl::Missing template file"
              echo "- Missing template file: $tmpl in $chart" >> error_log.txt
              FAILED=1
            fi
          done
          
          if ! helm lint "$chart" > helm-lint.log 2>&1; then
            echo "::error file=$chart::Helm lint failed:"
            cat helm-lint.log
            echo "- Helm lint failed for $chart" >> error_log.txt
            FAILED=1
          fi
          
          if [[ -f "$chart/Chart.yaml" ]]; then
            if git show origin/${{ github.base_ref }}:"$chart/Chart.yaml" >/dev/null 2>&1; then
              OLD_VERSION=$(git show origin/${{ github.base_ref }}:"$chart/Chart.yaml" | yq e '.version' -)
              NEW_VERSION=$(yq e '.version' "$chart/Chart.yaml")
              if [[ "$OLD_VERSION" == "$NEW_VERSION" ]]; then
                echo "::error file=$chart/Chart.yaml::Version not updated ($OLD_VERSION)"
                echo "- Chart version not updated: $chart ($OLD_VERSION)" >> error_log.txt
                FAILED=1
              fi
            fi
          fi
        done <<< "${{ steps.files.outputs.charts }}"
        
        echo "::endgroup::"
        
        if [ -f error_log.txt ]; then
          echo "ERRORS=$(cat error_log.txt)" >> $GITHUB_OUTPUT
        fi
        
        exit $FAILED

    - name: Create summary
      if: always()
      run: |
        echo "## Chart Validation Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f error_log.txt ]; then
          echo "### ❌ Validation Errors" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          cat error_log.txt >> $GITHUB_STEP_SUMMARY
        else
          echo "### ✅ All checks passed" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Validation Criteria" >> $GITHUB_STEP_SUMMARY
        echo "- Required files present (Chart.yaml, values.yaml, values.schema.json, README.md)" >> $GITHUB_STEP_SUMMARY
        echo "- Chart.yaml fields complete" >> $GITHUB_STEP_SUMMARY
        echo "- Image registry set to registry-2.yunna.net" >> $GITHUB_STEP_SUMMARY
        echo "- Template files present" >> $GITHUB_STEP_SUMMARY
        echo "- Version updated" >> $GITHUB_STEP_SUMMARY
        echo "- Helm lint passes" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
        echo "1. Fix any errors shown above" >> $GITHUB_STEP_SUMMARY  
        echo "2. Refer to [Chart开发规范](../docs/charts/STANDARDS.md)" >> $GITHUB_STEP_SUMMARY
        echo "3. Run helm lint locally to check syntax" >> $GITHUB_STEP_SUMMARY
        echo "4. Ensure all required files and fields are complete" >> $GITHUB_STEP_SUMMARY
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Changes will be validated automatically when you update the PR." >> $GITHUB_STEP_SUMMARY