# pr-check.yaml 
name: PR Checks

on:
 pull_request:
   types: [opened, synchronize, reopened]
   paths:
     - 'charts/**'

jobs:
 validate-charts:
   runs-on: ubuntu-latest
   permissions:
     contents: read
     pull-requests: write
   
   steps:
     - uses: actions/checkout@v3
       with:
         fetch-depth: 0
     
     - name: Set up Helm
       uses: azure/setup-helm@v3
       with:
         version: v3.12.3

     - name: Install dependencies
       run: |
         sudo apt-get update
         sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
         sudo chmod +x /usr/local/bin/yq
         sudo apt-get install -y jq git

     - name: Get modified directories
       id: changes
       run: |
         # 获取PR的base commit和head commit
         BASE_SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
           "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" \
           | jq -r .base.sha)
         HEAD_SHA=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
           "https://api.github.com/repos/${{ github.repository }}/pulls/${{ github.event.pull_request.number }}" \
           | jq -r .head.sha)
         
         # 获取变更的目录
         CHANGED_DIRS=$(git diff --dirstat=files,0 $BASE_SHA..$HEAD_SHA | grep -o "charts/stable/[^/]*" | sort -u)
         echo "changed_dirs=$CHANGED_DIRS" >> $GITHUB_OUTPUT
         echo "Changed directories: $CHANGED_DIRS"

     - name: Validate Charts Structure
       run: |
         EXIT_CODE=0
         
         # 使用上一步获取的目录
         CHANGED_DIRS="${{ steps.changes.outputs.changed_dirs }}"
         
         if [ -z "$CHANGED_DIRS" ]; then
           echo "No charts were modified in this PR"
           exit 0
         fi
         
         for chart in $CHANGED_DIRS; do
           echo "检查 Chart: $chart"
           
           # 检查必需文件
           for file in Chart.yaml values.yaml values.schema.json README.md; do
             if [ ! -f "$chart/$file" ]; then
               echo "::error::缺少必需文件：$file，位于 $chart" 
               EXIT_CODE=1
             fi
           done
           
           # 检查 Chart.yaml 必需字段 
           for field in apiVersion name description version appVersion annotations; do
             if ! yq e ".$field" "$chart/Chart.yaml" > /dev/null 2>&1; then
               echo "::error::Chart.yaml 中缺少必需字段：$field"
               EXIT_CODE=1
             fi
           done

           # 检查镜像仓库配置
           if ! yq e '.image.imageRegistry' "$chart/values.yaml" | grep -q "registry-2.yunna.net"; then
             echo "::error::镜像仓库地址必须为 registry-2.yunna.net"
             EXIT_CODE=1
           fi

           # 检查持久化配置
           if ! yq e '.persistence' "$chart/values.yaml" > /dev/null 2>&1; then
             echo "::error::缺少持久化配置"
             EXIT_CODE=1
           fi

           # 检查资源限制配置
           if ! yq e '.resources' "$chart/values.yaml" > /dev/null 2>&1; then
             echo "::error::缺少资源限制配置"
             EXIT_CODE=1
           fi
           
           # 检查必需的模板文件
           for tmpl in deployment.yaml service.yaml _helpers.tpl; do
             if [ ! -f "$chart/templates/$tmpl" ]; then
               echo "::error::缺少必需的模板文件：$tmpl"
               EXIT_CODE=1
             fi
           done

           # Helm lint 检查
           if ! helm lint "$chart"; then
             echo "::error::Helm lint 检查失败：$chart"
             EXIT_CODE=1
           fi
           
           # Schema 验证
           if ! helm template test "$chart" > /dev/null; then
             echo "::error::values.schema.json 验证失败"
             EXIT_CODE=1
           fi
         done
         
         exit $EXIT_CODE

     - name: Check Chart Version Bump
       if: github.event_name == 'pull_request'
       run: |
         EXIT_CODE=0
         CHANGED_DIRS="${{ steps.changes.outputs.changed_dirs }}"
         
         if [ -z "$CHANGED_DIRS" ]; then
           exit 0
         fi
         
         for chart in $CHANGED_DIRS; do
           if git diff --quiet origin/${{ github.base_ref }} -- "$chart/Chart.yaml"; then
             continue
           fi
           
           if ! git show origin/${{ github.base_ref }}:"$chart/Chart.yaml" | yq e '.version' - > /dev/null 2>&1; then
             echo "::error::无法获取旧版本号" 
             continue
           fi
           
           OLD_VERSION=$(git show origin/${{ github.base_ref }}:"$chart/Chart.yaml" | yq e '.version' -)
           NEW_VERSION=$(yq e '.version' "$chart/Chart.yaml")
           
           if [ "$OLD_VERSION" = "$NEW_VERSION" ]; then
             echo "::error::Chart版本未更新：$chart ($OLD_VERSION)"
             EXIT_CODE=1
           fi
         done
         
         exit $EXIT_CODE

     - name: Create Status Check
       if: always()
       uses: actions/github-script@v7
       with:
         script: |
           const conclusion = process.env.GITHUB_WORKFLOW_CONCLUSION || 'failure';
           const context = 'Chart Validation';
           
           await github.rest.checks.create({
             owner: context.repo.owner,
             repo: context.repo.repo,
             name: context,
             head_sha: context.sha,
             status: 'completed',
             conclusion: conclusion === 'success' ? 'success' : 'failure',
             output: {
               title: conclusion === 'success' ? 'Charts validated successfully' : 'Chart validation failed',
               summary: conclusion === 'success' 
                 ? 'All chart validations passed.'
                 : 'Some chart validations failed. Please check the workflow logs for details.'
             }
           });