name: PR Checks

on:
  pull_request_target:
    types: [opened, synchronize, reopened]
    paths:
      - 'charts/**'

permissions:
  contents: read
  pull-requests: write
  checks: write
  issues: write

jobs:
  validate-charts:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: v3.12.3

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y jq git
          sudo wget -qO /usr/local/bin/yq https://github.com/mikefarah/yq/releases/latest/download/yq_linux_amd64
          sudo chmod +x /usr/local/bin/yq

      - name: Get changed files
        id: changed-files
        uses: tj-actions/changed-files@v32
        with:
          files: |
            charts/**

      - name: Extract chart directories
        id: chart-dirs
        run: |
          CHART_DIRS=$(echo "${{ steps.changed-files.outputs.all_changed_files }}" | grep '^charts/stable/[^/]\+/' | cut -d/ -f1-3 | sort -u)
          if [ -z "$CHART_DIRS" ]; then
            echo "No chart changes detected"
            echo "chart_dirs=[]" >> $GITHUB_OUTPUT
            exit 0
          fi
          
          # Convert to JSON array
          CHART_JSON="$(echo "$CHART_DIRS" | jq -R -s -c 'split("\n")[:-1]')"
          echo "chart_dirs=$CHART_JSON" >> $GITHUB_OUTPUT

      - name: Validate charts
        id: validate
        if: ${{ steps.chart-dirs.outputs.chart_dirs != '[]' }}
        run: |
          validate_chart() {
            local chart_dir="$1"
            local errors=()
            
            # Check required files
            for file in Chart.yaml values.yaml values.schema.json README.md; do
              if [ ! -f "$chart_dir/$file" ]; then
                errors+=("Missing required file: $file")
              fi
            done
            
            # Validate Chart.yaml
            if [ -f "$chart_dir/Chart.yaml" ]; then
              for field in apiVersion name description version appVersion annotations; do
                if ! yq e ".$field" "$chart_dir/Chart.yaml" > /dev/null 2>&1; then
                  errors+=("Chart.yaml missing required field: $field")
                fi
              done
              
              # Check annotations
              if ! yq e '.annotations."yunna.net/category"' "$chart_dir/Chart.yaml" > /dev/null 2>&1; then
                errors+=("Missing yunna.net/category annotation")
              fi
              if ! yq e '.annotations."yunna.net/category-zh"' "$chart_dir/Chart.yaml" > /dev/null 2>&1; then
                errors+=("Missing yunna.net/category-zh annotation")
              fi
            fi
            
            # Check values.yaml
            if [ -f "$chart_dir/values.yaml" ]; then
              if ! yq e '.image.imageRegistry' "$chart_dir/values.yaml" | grep -q "registry-2.yunna.net"; then
                errors+=("Image registry must be registry-2.yunna.net")
              fi
              
              for config in persistence resources; do
                if ! yq e ".$config" "$chart_dir/values.yaml" > /dev/null 2>&1; then
                  errors+=("Missing $config configuration")
                fi
              done
            fi
            
            # Check templates
            for tmpl in deployment.yaml service.yaml _helpers.tpl; do
              if [ ! -f "$chart_dir/templates/$tmpl" ]; then
                errors+=("Missing template: $tmpl")
              fi
            done
            
            # Run helm lint
            if ! helm lint "$chart_dir" > /dev/null 2>&1; then
              errors+=("helm lint check failed")
            fi
            
            if [ ${#errors[@]} -gt 0 ]; then
              printf "%s\n" "${errors[@]}"
              return 1
            fi
            return 0
          }
          
          REPORT=""
          FAILED=false
          
          for chart in $(echo '${{ steps.chart-dirs.outputs.chart_dirs }}' | jq -r '.[]'); do
            echo "Validating chart: $chart"
            
            if ! validate_chart "$chart"; then
              REPORT+="### ❌ $chart\n"
              FAILED=true
            else
              REPORT+="### ✅ $chart - Validation passed\n"
            fi
          done
          
          echo "report<<EOF" >> $GITHUB_OUTPUT
          echo -e "$REPORT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          if [ "$FAILED" = "true" ]; then
            exit 1
          fi

      - name: Create PR Comment
        if: always() && steps.chart-dirs.outputs.chart_dirs != '[]'
        uses: peter-evans/create-or-update-comment@v3
        with:
          issue-number: ${{ github.event.pull_request.number }}
          body: |
            ## Chart Validation Report
            
            ${{ steps.validate.outputs.report || '❌ Validation failed with an error' }}
            
            ### 注意事项
            - 请确保所有必需文件完整
            - Chart 结构需符合[Chart开发规范](../docs/charts/STANDARDS.md)
            - 镜像仓库地址必须为 registry-2.yunna.net
            
            请修复以上问题并重新提交。

      - name: Add PR Label
        if: failure() && steps.chart-dirs.outputs.chart_dirs != '[]'
        uses: actions-ecosystem/action-add-labels@v1
        with:
          labels: needs-fix